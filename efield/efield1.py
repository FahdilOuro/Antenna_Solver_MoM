"""
This code simulates the electric and magnetic fields generated by a metallic surface from surface currents at a point in space.
It uses equivalent dipoles to represent these currents.
Calculates the contributions of the electric and magnetic fields for each dipole at the observation point.
"""
import os

import numpy as np

from rwg.rwg2 import DataManager_rwg2
from rwg.rwg4 import DataManager_rwg4
from utils.dipole_parameters import compute_dipole_center_moment, compute_e_h_field

def calculate_electric_magnetic_field_at_point(filename_mesh2_to_load, filename_current_to_load, observation_point, scattering = False, radiation = False):
    """
        Calculate and display electric fields, magnetic fields, Poynting vector, energy, and Radar Cross Section (RCS)
        at a specified observation point, using mesh data and currents loaded from .mat files.

        Parameters:
            * filename_mesh2_to_load : str, path to the mesh file (MAT).
            * filename_current_to_load : str, path to the file containing currents and other associated data (MAT).
            * observation_point : tuple or n-d-array, coordinates of the observation point where fields will be calculated.

        Workflow:
            1. Extract base file name without extension and modify name.
            2. Load mesh and current data from MAT files.
            3. Compute wave number and its complex component.
            4. Compute dipole characteristics on the mesh (centers and dipole moments).
            5. Compute total electric and magnetic fields from the observation point and dipole moments.
            6. Display results for fields, Poynting vector, energy, energy per unit solid angle, and RCS.

        Return:
        No return value, but results are printed to the console for analysis.

        Example:
        This function calculates and displays various electromagnetic field parameters
        at a given observation point, using a 3D mesh and pre-simulated currents.

        Notes:
        RCS (Radar Cross Section) is a measure of how much power an object reflects back toward the radar,
        often used to characterize the apparent size of an object in radar detection.
    """

    # 1. Extract base file name without extension and modify name
    base_name = os.path.splitext(os.path.basename(filename_mesh2_to_load))[0]
    base_name = base_name.replace('_mesh2', '')

    # 2. Load mesh and current data from MAT files
    _, triangles, edges, *_ = DataManager_rwg2.load_data(filename_mesh2_to_load)

    if scattering:
        frequency, omega, _, _, light_speed_c, eta, _, _, _, current = DataManager_rwg4.load_data(filename_current_to_load, scattering=scattering)
    elif radiation:
        frequency, omega, _, _, light_speed_c, eta, _, current, *_ = DataManager_rwg4.load_data(filename_current_to_load, radiation=radiation)
    elif (radiation is False and scattering is False) or (radiation is True and scattering is True):
        raise ValueError("Either radiation or scattering must be True, but not both or neither.")

    # 3. Compute wave number k and its complex component
    k = omega / light_speed_c    # Wave number (rad/m)
    complex_k = 1j * k           # Complex component of wave number

    # 4. Display basic information
    print('')
    print(f"Frequency = {frequency} Hz")
    print(f"Wavelength lambda = {light_speed_c / frequency} m")

    # 5. Compute dipoles and dipole moments
    dipole_center, dipole_moment = compute_dipole_center_moment(triangles, edges, current)

    # 6. Compute total electric and magnetic fields from the observation point
    e_field_total, h_field_total, poynting_vector, w, u, norm_observation_point = compute_e_h_field(observation_point, eta, complex_k, dipole_moment, dipole_center)

    # 7. Display observation point
    print(f"The observation point is : {observation_point}")

    print('')

    # 8. Display total electric field results
    print(f"e_field_total of {base_name} at the observation point {observation_point} is :")
    print(f"{e_field_total[0].real : .7f} {"+" if e_field_total[0].imag >= 0 else "-"}{abs(e_field_total[0].imag) : .7f}i V/m")
    print(f"{e_field_total[1].real : .7f} {"+" if e_field_total[1].imag >= 0 else "-"}{abs(e_field_total[1].imag) : .7f}i V/m")
    print(f"{e_field_total[2].real : .7f} {"+" if e_field_total[1].imag >= 0 else "-"}{abs(e_field_total[2].imag) : .7f}i V/m")

    print('')

    # 9. Display total magnetic field results
    print(f"h_field_total of {base_name} at the observation point {observation_point} is :")
    print(f"{h_field_total[0].real : .7f} {"+" if h_field_total[0].imag >= 0 else "-"}{abs(h_field_total[0].imag) : .7f}i A/m")
    print(f"{h_field_total[1].real : .7f} {"+" if h_field_total[1].imag >= 0 else "-"}{abs(h_field_total[1].imag) : .7f}i A/m")
    print(f"{h_field_total[2].real : .7f} {"+" if h_field_total[2].imag >= 0 else "-"}{abs(h_field_total[2].imag) : .7f}i A/m")

    print('')
    print("Poynting vector is equal to : ")
    print(f"{poynting_vector[0] : 8f} W/m^2")
    print(f"{poynting_vector[1] : 8f} W/m^2")
    print(f"{poynting_vector[2] : 8f} W/m^2")

    print('')
    print(f"w = {w} W/m^2")

    print('')
    print(f"u = {u} W/unit solid angle")

    # Radar Cross Section (RCS) is a measure of an object's ability to reflect or scatter electromagnetic waves.
    # It is mainly used in radar applications to describe the apparent scale of the object in radar scattering terms.
    # 10. Compute Radar Cross Section (RCS)
    e_field_dot_conj = np.sum(np.real(e_field_total * np.conj(e_field_total)))
    if scattering:
        rcs = 4 * np.pi * (norm_observation_point ** 2) * e_field_dot_conj

        print('')
        print(f"RCS = {rcs}")